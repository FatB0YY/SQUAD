// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// User -> это email + password (credentials)
// Account -> это OAuth, также создается User

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

// ------------------- squad 

model User { 
  id                 String               @id @default(cuid())
  password           String? 
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?              @db.Text
  role               UserRole             @default(USER)
  accounts           Account[]

  isTwoFactorEnable  Boolean              @default(false)
  twoFactorConfirmation TwoFactorConfirmation?


  // new squad app
  // userId             String               @unique
  
  servers            Server[]
  members            Member[]
  channels           Channel[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Server {
  id                 String               @id @default(cuid())
  name               String
  image              String               @db.Text
  inviteCode         String               @unique

  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  members            Member[]
  channels           Channel[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id                 String               @id @default(cuid())
  role               MemberRole           @default(GUEST)

  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  serverId           String
  server             Server               @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages           Message[]

  conversationInitiated Conversation[]    @relation("MemberOne")
  conversationReceived  Conversation[]    @relation("MemberTwo")

  directMessages     DirectMessage[]


  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id                 String               @id @default(cuid())
  name               String
  type               ChannelType          @default(TEXT)

  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId           String
  server             Server               @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages           Message[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([userId])
  @@index([serverId])
}

// -------------------

model Account { // OAuth account
  id                 String               @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?              @db.Text
  access_token       String?              @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?              @db.Text
  session_state      String?

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                 String               @id @default(cuid())
  email              String 
  token              String               @unique
  expires            DateTime

  @@unique([email, token])
} 

model PasswordResetToken {
  id                 String               @id @default(cuid())
  email              String 
  token              String               @unique
  expires            DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                 String               @id @default(cuid())
  email              String 
  token              String               @unique
  expires            DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                 String               @id @default(cuid())

  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// messenger

model Message {
  id                 String               @id @default(cuid())
  content            String               @db.Text

  fileUrl            String?              @db.Text

  memberId           String
  member             Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId          String
  channel            Channel              @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted            Boolean              @default(false)

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id                 String               @id @default(cuid())

  memberOneId        String
  memberOne          Member               @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId        String
  memberTwo          Member               @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages     DirectMessage[]

  // @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id                 String               @id @default(cuid())
  content            String               @db.Text
  fileUrl            String?              @db.Text  

  memberId           String
  member             Member               @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId     String
  conversation       Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted            Boolean              @default(false)

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
